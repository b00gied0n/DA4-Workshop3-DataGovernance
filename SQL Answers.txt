/*
CORNDEL SQL Workshops - SQL Worksheet - with answers

GUIDE TO WORKFLOW
DEMO: Your instructor will introduce the concept and you can code along with them.
OBSERVE: Things to consider about the queries and results.
CHALLENGE: A challenge that may require multiple queries for you to answer the question.


CONTENTS
-- SECTION 1  - Extracting data FROMa table
-- SECTION 1B - Extracting unique data FROM a table
-- SECTION 2  - Filtering data with a WHERE clause
-- SECTION 2B - Filtering data with multiple conditions & Handling missing or NULL values
-- SECTION 3  - Sorting data with ORDER BY
-- SECTION 4  - Aggregate functions and GROUP BY
-- SECTION 5  - Combine GROUP BY with other commands
-- SECTION 6  - Combining tables with JOINs
-- SECTION 7  - Using JOINs with other commands
-- SECTION 8  - Using sub-queries
-- SECTION 9  - Creating and removing tables
-- SECTION 10 - Stretch Questions

*/



-- ----------------------------------------- --
-- SECTION 1 - Extracting data FROM a table  --
-- ----------------------------------------- --

-- DEMO: QUESTION 01
-- Use the SELECT command to extract all columns FROM the customer table.
-- OBSERVE: What are the columns in customer? What data types do they contain?
SELECT * FROM customer;
-- Answer: The table has several columns, including *customer_id*, which has the *integer* data type.


-- DEMO: QUESTION 02
-- Extract the first name and last name columns FROM  the customer table.
-- OBSERVE: How many records are returned? What data types do the the columns have?
SELECT first_name, last_name FROM customer;
-- Answer: 599 records were returned.
-- Answer: The columns have the *character varying* data type.


-- DEMO: QUESTION 03
-- Use the LIMIT command to return only the first 10 records FROM customer.
SELECT * FROM customer LIMIT 10;


-- DEMO: QUESTION 04
-- Use the COUNT command to count all records FROM  the customer table.
-- OBSERVE: How many records does the table customer have?
SELECT COUNT(*) FROM customer;
-- Answer: 599 records.


-- QUESTION 05
-- Use the SELECT  command to extract all columns FROM  the payment table.
-- OBSERVE: What are the columns in payment? What data types do they contain? How many records?
SELECT * FROM payment LIMIT 10;
-- Answer: The table has several columns, including *payment_id*, which has the *integer* data type.
SELECT COUNT(*) FROM payment;
-- Answer: 16049 records.


-- QUESTION 06
-- Extract the columns customer_id, amount, and payment_date FROM the payment table.
-- OBSERVE: What is the data type for each column?
SELECT customer_id, amount, payment_date FROM payment LIMIT 10;
-- Answer: *customer_id* has the data type *integer*.
-- Answer: *amount* has the data type *numeric*.
-- Answer: *payment_date* has the data type *timestamp without time zone*.


-- QUESTION 07
-- Choose any table you haven't looked at yet - Extract all of the data FROM  that table.
-- OBSERVE: What are its columns? What data types do the columns contain? How many records are in the table?
SELECT * FROM film LIMIT 10;

SELECT COUNT(*) FROM film;


-- QUESTION 08
-- Use SELECT  to view the column names for both the *city* and *country* tables. You will need two queries.
-- OBSERVE: Do the City & Country table have any columns with the same name?
-- CHALLENGE: Explore other tables using SELECT . Find two other tables that both share a column with the same name.
SELECT * FROM rental LIMIT 10;

SELECT * FROM payment LIMIT 10;
-- Answer: Both *rental* and *payment* have a column named *rental_id*.


-- KEYWORDS COVERED SO FAR:
-- SELECT, FROM, LIMIT, COUNT
-- Extract all COLUMNS using *
-- Extract specific COLUMNS using their names
----------------------------------------------------------------------------------------------------------------------------------------

-- ------------------------------------------------- --
-- SECTION 1B - Extracting unique data FROM a table  --
-- ------------------------------------------------- --

-- DEMO: QUESTION 09
-- Extract the first name column FROM  customer.
SELECT first_name FROM customer;


-- DEMO: QUESTION 10
-- Use the DISTINCT command to extract all the distinct first names FROM  customer.
SELECT DISTINCT first_name FROM customer;


-- DEMO: QUESTION 11
-- How many distinct first names are there in customer?
-- SELECT  COUNT(first_name) FROM  customer; -- This does not give the right answer
SELECT COUNT(DISTINCT first_name) FROM customer;


-- Answer: 591 distinct first names.
-- QUESTION 12
-- Use the SELECT  command to extract all the distinct values for *amount* in the payment table.
SELECT DISTINCT amount FROM payment;


-- QUESTION 13
-- Use COUNT function to count the distinct values for *amount* in the payment table.
-- OBSERVE: How many distinct values for *amount* exist in the payment table?
SELECT COUNT(DISTINCT amount) FROM payment;


-- Answer: 19 distinct values for *amount*.
-- QUESTION 14
-- How many different store_ids exist in the customer table?
SELECT DISTINCT store_id FROM customer;

SELECT COUNT(DISTINCT store_id) FROM customer;


-- Answer: 2 distinct values for *store_id*.
-- QUESTION 15
-- How many different store_ids exist in the store table?
-- OBSERVE: Do all the possible store_ids in the database exist in the customer table?
SELECT COUNT(*) FROM store;
-- Answer: Yes, there are only 2 records in the store table,
SELECT * FROM store;
-- Answer: which correspond exactly to the possible values for store_id in the customer table.


-- QUESTION 16
-- How many different cities are there in the address table?
-- How many different cities are there in the city table?
SELECT COUNT(DISTINCT city_id) FROM address;
-- Answer: There are 599 values for city_id in the address table.
SELECT COUNT(*) FROM city;
-- Answer: There are 600 values for city_id in the city table.


-- QUESTION 17
-- CHALLENGE: How many cities might be duplicated in the address table?
SELECT COUNT(DISTINCT city_id) FROM address;
-- Answer: There are 599 different values for city_id in the address table.
SELECT COUNT(*) FROM address;
-- Answer: There are 603 records in the address table, in total.
-- Answer: Therefore, somewhere between 1 and 4 cities are duplicated.


-- KEYWORDS COVERED SO FAR:
-- SELECT , FROM , LIMIT, COUNT, DISTINCT
-- Extract all COLUMNS using *
-- Extract specific COLUMNS using their name
----------------------------------------------------------------------------------------------------------------------


-- ----------------------------------------------- --
-- SECTION 2 - filtering data with a WHERE  clause --
-- ----------------------------------------------- --

-- DEMO: QUESTION 18
-- SELECT  all the columns in the customer table for records WHERE  store_id is 1.
SELECT *
FROM customer
WHERE store_id = 1
;


-- DEMO: QUESTION 19
-- SELECT  all the columns in the customer table for records WHERE  the first name is Jenny.
SELECT *
FROM customer
WHERE first_name = 'Jenny'
;

SELECT *
FROM customer
WHERE first_name = 'JENNY'
;
-- Answer: The first attempt does not work because all first names in the database are capitalised.


-- DEMO: QUESTION 20
-- How many records are there in customer WHERE  store_id is 1?
SELECT COUNT(*)
FROM customer
WHERE store_id = 1
;
-- Answer: 326 records WHERE  store_id is 1.


-- QUESTION 21
-- SELECT  all the data FROM  payment WHERE  the customer_id is 357.
-- OBSERVE: How many rows do you get?
SELECT *
FROM payment
WHERE customer_id = 357
;
-- Answer: 26 records in payment have the value 357 for customer_id.


-- QUESTION 22
-- Use the SELECT command to only extract the *address* and *postal_code* columns, WHERE the city_id is 300
-- OBSERVE: How many rows do you get?
SELECT address, postal_code
FROM address
WHERE city_id = 300
;
-- Answer: 2 records in address have the value 300 for city_id.


-- QUESTION 23
-- SELECT  all the addresses WHERE  the city is Aurora. How many rows do you get?
-- OBSERVE: How do we identify which *city_id* corresponds to a specific city name?
SELECT *
FROM city
WHERE city = 'Aurora'
;

SELECT address, postal_code
FROM address
WHERE city_id = 42
;
-- Answer: 2 addresses in Aurora.


-- QUESTION 24
-- The customers of store 1 share how many different first names between them?
SELECT COUNT(DISTINCT first_name)
FROM customer
WHERE store_id = 1
;
-- Answer: 324 different first names.


-- QUESTION 25
-- How many records in payment with amount greater than 5?
SELECT COUNT(*)
FROM payment
WHERE amount > 5
;
-- Answer: 3957 records in payment with amount greater than 5.


-- QUESTION 26
-- How many records in payment WHERE  the date is later than April 2007?
SELECT COUNT(*)
FROM payment
WHERE payment_date > '2007-04-30 23:59:59'
;
-- Answer: 182 records in payment WHERE  the date is later than April 2007.
-- Note, we need to include the time in our condition
-- because the column uses the *timestamp* data type.


-- SECTION 2 COMMANDS COVERED SO FAR:
-- WHERE
-- OPERATORS COVERED SO FAR:
-- Equals to =
-- Greater than >
-- Greater than, inclusive =>
-- Less than <
-- Less than, inclusive =<
-- -----------------------------------------------------------------------------------------------------


--------------------------------------------------- --
-- SECTION 2B - Filtering data with a WHERE  clause --
--              & multiple conditions               --
--              Handling missing or NULL values     --
--------------------------------------------------- --

-- DEMO: QUESTION 27
-- SELECT  the first_name, last_name, store_id and address_id columns
-- FROM the customer table WHERE  *store_id* is 1 and *address_id* is bigger than 150.
SELECT first_name, last_name, store_id, address_id
FROM customer
WHERE store_id = 1
	AND address_id > 150
;


-- DEMO: QUESTION 28
-- SELECT data FROM customer WHERE  first name is either Terry or Mary.
SELECT *
FROM customer
WHERE first_name = 'TERRY'
	OR first_name = 'MARY'
;


-- DEMO: QUESTION 29
-- How many customers have the name Terry or Mary?
SELECT COUNT(*)
FROM customer
WHERE first_name IN ('TERRY','MARY')
;
-- Answer: 3 customers called Terry or Mary.


-- DEMO: QUESTION 30
-- SELECT  data FROM  payment WHERE  amount is between 5 and 8.99, inclusive.
SELECT *
FROM payment
WHERE amount BETWEEN 5 AND 8.99
;


-- DEMO: QUESTION 31
-- SELECT  data FROM  customer WHERE  the name contains the string 'AR'.
SELECT *
FROM customer
WHERE first_name LIKE '%AR%'
;


-- DEMO: QUESTION 32
-- SELECT  the customer_id column FROM  customer WHERE  first name is missing.
SELECT customer_id
FROM customer
WHERE first_name IS NULL
;


-- DEMO: QUESTION 33
-- SELECT  the customer_id column FROM  customer WHERE  first name is not missing.
SELECT customer_id
FROM customer
WHERE first_name IS NOT NULL
;


-- QUESTION 34
-- How many customers called Jamie are registered with store 1? What about store 2?
SELECT COUNT(*)
FROM customer
WHERE first_name = 'JAMIE'
	AND store_id = 1
;

SELECT COUNT(*)
FROM customer
WHERE first_name = 'JAMIE'
	AND store_id = 2
;
-- Answer: 1 customer called Jamie registered with each store.


-- QUESTION 35
-- How many films have length between 60 and 90 minutes (inclusive)?
SELECT *
FROM film
WHERE length BETWEEN 60 AND 90
;
-- Answer: 229 films between 60 and 90 minutes long.


-- QUESTION 36
-- How many customers in the database with a first name beginning with M?
SELECT COUNT(*)
FROM customer
WHERE first_name LIKE 'M%'
;
-- Answer: 51 customers in the database with a first name beginning with M.


-- QUESTION 37
-- How many customers in the database with a first name in the list,
-- ('MOLLY','JENNY','JIMMY','LENNY')?
SELECT COUNT(*)
FROM customer
WHERE first_name IN ('MOLLY','JENNY','JIMMY','LENNY')
;
-- Answer: 2 customers in the database with a first name in the list.


-- QUESTION 38
-- Find all the names in the database with a first name ending with Y?
-- OBSERVE: How many records are returned FROM  your query?
SELECT first_name, last_name
FROM customer
WHERE first_name LIKE '%Y'
	OR last_name LIKE '%Y'
;
-- Answer: 135 records returned with either *first_name* or *last_name* ending with 'Y'.


-- QUESTION 39
-- How many records in address have null values for the column address?
-- How many records in address have null values for the column address2?
SELECT COUNT(*)
FROM address
WHERE address IS NULL
;

SELECT COUNT(*)
FROM address
WHERE address2 IS NULL
;
--Answer: 0 records in address have null values for the column address.
--Answer: 4 records in address have null values for the column address2.


-- QUESTION 40
-- CHALLENGE: Are there more countries which begin with A or that end with N?
-- CHALLENGE: Are there any countries that both begin with A and end with N?
-- This will require multiple queries.
SELECT COUNT(*)
FROM country
WHERE country LIKE 'A%'
;
-- Answer: 10

SELECT COUNT(*)
FROM country
WHERE country LIKE '%n'
;
-- Answer: 18
-- Answer: There are more countries that end with N (18 vs 10).

SELECT *
FROM country
WHERE country LIKE 'A%n'
;
-- Answer: Yes, Afghanistan and Azerbaijan both fit this pattern.


-- QUESTION 41
-- Are there more cities with names containing B or names containing C?
-- This will require multiple queries.
SELECT COUNT(*)
FROM city
WHERE city LIKE '%B%'
	OR city LIKE '%b%'
;
-- 121

SELECT COUNT(*)
FROM city
WHERE city LIKE '%C%'
	OR city LIKE '%c%'
;
-- 107
-- Answer: There are more cities with names containing B than C (121 vs 107).


-- QUESTION 42
-- CHALLENGE: UPPER is a function that converts a column to upper case.
-- Complete question 41 again but use the UPPER function to avoid the need to distinguish between upper and lower case characters.
SELECT COUNT(*)
FROM city
WHERE UPPER(city) LIKE '%B%'
;
	-- 121

SELECT COUNT(*)
FROM city
WHERE UPPER(city) LIKE '%C%'
;
	-- 107
-- Answer: There are more cities with names containing B than C (121 vs 107).


-- COMMANDS COVERED SO FAR:
-- WHERE , AND, OR, IN, BETWEEN, LIKE, iLIKE, NULL, NOT
-- SECTION 2 COMMANDS COVERED SO FAR:
-- WHERE , AND, OR
-- OPERATORS COVERED SO FAR:
-- Equal to a string:            column = 'value'
-- Equal to a number:            column = 123
-- Greater than:                 column > 123
-- Greater than, inclusive:      column >= 123
-- Less than:                    column < 123
-- Less than, inclusive:            column <= 123
-- Betweem, inclusive:              column >= 1 and column <= 123
-- Between, exclusive               column > 1 and column < 123
-- BETWEEN (inclusive):             column BETWEEN 1 AND 123
-- LIKE (case-sensitive):           column LIKE 'A'
-- LIKE with wildcards:    column LIKE 'A%'
-- iLIKE (Case-insensitive):        column iLIKE 'a'
-- iLIKE with Wildcards:   column iLIKE 'a%'
-- IN (list)                        column in (1, 2, 3, 'a', 'b', 'c')
-- NOT (Combined other operators):  column NOT = 'VALUE'
-- ! Short for NOT:           column != 'VALUE'
-- IS NULL       Column IS NULL
-- -----------------------------------------------------------------------------------------------------


-- ------------------------------------------------------ --
-- SECTION 3 - Sorting data with ORDER BY
--
-- ------------------------------------------------------ --

-- DEMO: QUESTION 43
-- Use the ORDER BY command to sort customers alphabetically by last name.
-- OBSERVE: Which name is first alphabetically? Which is last?
SELECT first_name, last_name
FROM customer
ORDER BY last_name
;
-- Answer: Rafael Abney
-- Answer: Cynthia Young


-- DEMO: QUESTION 44
-- Sort the records in payment FROM  the largest amount to the least.
-- EX. Sort the records in payment FROM  the largest amount to the least.
SELECT *
FROM payment
ORDER BY amount DESC
;


-- DEMO: QUESTION 45
-- Output 1 record for the customer whose first name comes first alphabetically.
SELECT *
FROM customer
ORDER BY first_name
LIMIT 1
;
-- Answer: Aaron Selby


-- QUESTION 46
-- What are the first and last cities alphabetically?
-- You will need two queries.
SELECT city
FROM city
ORDER BY city
;

SELECT city
FROM city
ORDER BY city DESC
;
-- Answer: 'A Corua (La Corua)' & 'Zinguinchor'


-- QUESTION 47
-- Output the countries which come first and last alphabetically.
-- You will need two queries
SELECT country
FROM country
ORDER BY country
LIMIT 1
;

SELECT country
FROM country
ORDER BY country DESC
LIMIT 1
;


-- QUESTION 48
-- Extract data for the top 15 films when ordered by their length, in descending order.
-- Only output the film_id, title, and length columns.
SELECT film_id, title, length
FROM film
ORDER BY length DESC
LIMIT 15
;


-- QUESTION 49
-- First sort films by their length, in descending order.
-- But also sort alphabetically by title, to break any ties.
SELECT film_id, title, length
FROM film
ORDER BY length DESC, title
;

-- QUESTION 50
-- Which is the biggest postal code in address?
-- Which is the smallest postal code in address?
-- OBSERVE: they are numerical USA zip codes, which data type we are using... what problems does this cause?
SELECT postal_code
FROM address
ORDER BY postal_code DESC
;

SELECT postal_code
FROM address
ORDER BY postal_code
;
-- Answer: 99865 (biggest).
-- Answer: 1027 (smallest), although there are some blanks.
-- Answer: postal_code is a character, so we are sorting alphabetically, not numerically


-- QUESTION 51
-- Which is the longest film with a 'PG' rating?
SELECT title, length, rating
FROM film
WHERE rating = 'PG'
ORDER BY length DESC
;
-- Answer: WORST BANGER


-- QUESTION 52
-- What is the largest payment by a customer whose first name begins with Y?
-- You will need multiple queries.
SELECT customer_id, first_name
FROM customer
WHERE first_name LIKE 'Y%'
;
-- Customer IDs are 174 and 190
-- Now use the results FROM the previous query to filter payment...
SELECT amount
FROM payment
WHERE customer_id IN (174,190)
ORDER BY amount DESC
;
-- Answer: 9.99


-- COMMANDS COVERED SO FAR:
-- ORDER BY , DESC
-- -----------------------------------------------------------------------------------------------------

-- -------------------------------------------- --
-- SECTION 4 - aggregate functions and GROUP BY --
-- -------------------------------------------- --

-- DEMO: QUESTION 53
-- What is the minimum, maximum, sum, and mean of amount in payment?
SELECT COUNT(amount)
FROM payment
;
-- Answer is 16049

SELECT MIN(amount)
FROM payment
;
-- Answer is 0.00

SELECT MAX(amount)
FROM payment
;
-- Answer is 11.99

SELECT SUM(amount)
FROM payment
;
-- Answer is 67416.51

SELECT AVG(amount)
FROM payment
;
-- Answer is 4.20


-- DEMO: QUESTION 54
-- Use the MIN and MAX functions to find the first and last films alphabetically.
SELECT MIN(title)
FROM film
;
-- Answer is 0.00

SELECT MAX(title)
FROM film
;
-- Answer is 11.99


-- DEMO: QUESTION 55
-- Create a single output which includes
-- the minimum, maximum, sum, and mean of amount in payment.
-- Use aliases to give each column a sensible name.
SELECT
	COUNT(amount) AS num_records,
	MIN(amount) AS min_amount,
	MAX(amount) AS max_amount,
	SUM(amount) AS total_amount,
	AVG(amount) AS avg_amount
FROM payment
;


-- QUESTION 56
-- What is the minimum, maximum, sum, and mean of rental_duration in film?
SELECT
	MIN(rental_duration)
FROM film
;
-- Answer is 3

SELECT
	MAX(rental_duration)
FROM film
;
-- Answer is 7

SELECT
	SUM(rental_duration)
FROM film
;
-- Answer is 4985

SELECT
	AVG(rental_duration)
FROM film
;
-- Answer is 4.99


-- QUESTION 57
-- Choose another sensible column FROM  film.
-- Create a single output which includes
-- the minimum, maximum, sum, and mean of that column.
-- Use aliases to give each column a sensible name.
SELECT
	MIN(length) AS min_length,
	MAX(length) AS max_length,
	SUM(length) AS total_length,
	CAST(AVG(length) AS DECIMAL(8, 2)) AS avg_length
FROM film
;
-- We have used the CAST function to change
-- the format of our avg_length column.


-- QUESTION 58
-- Do PG films or PG-13 films tend to be longer?
SELECT
	AVG(length)
FROM film
WHERE rating = 'PG'
;
-- Answer is 112.01

SELECT
	AVG(length)
FROM film
WHERE rating = 'PG-13'
;
-- Answer is 120.44
-- Answer: PG-13 tend to be longer


-- COMMANDS COVERED SO FAR:
-- MIN, MAX, SUM, AVG
-- -----------------------------------------------------------------------------------------------------

-- DEMO: QUESTION 59
-- Aggregate the data in the customer table, by store_id.
-- Create a column with the number of records for each store_id.
SELECT
	store_id,
	COUNT(*) AS frequency
FROM customer
GROUP BY store_id
;


-- DEMO: QUESTION 60
-- Create a table summarising the average length of films.
-- Output one row for each distinct rating.
SELECT
	rating,
	AVG(length) AS avg_length
FROM film
GROUP BY rating
;


-- DEMO: QUESTION 61
-- Aggregate the film table by release year and rating.
-- Create a column showing the total number of records for each combination.
-- Also create a column showing the first film alphabetically for each combination.
SELECT
	release_year,
	rating,
	COUNT(*) AS frequency,
	MIN(title) AS first_film_alphabetically
FROM film
GROUP BY release_year, rating
;


-- QUESTION 62
-- Aggregate the data in the film table, by rating.
-- Create a column with the number of records for each rating.
SELECT
	rating,
	COUNT(film_id) AS num_records
FROM film
GROUP BY rating
;


-- QUESTION 63
-- Create a table summarising the average sales value.
-- for each member of staff in the payment table.
SELECT
	staff_id,
	AVG(amount) AS avg_sales_value
FROM payment
GROUP BY staff_id
;


-- QUESTION 64
-- Aggregate the payment table by staff_id and amount.
-- Create a column showing the total number of records for each combination.
SELECT
	staff_id,
	amount,
	COUNT(*) AS frequency
FROM payment
GROUP BY staff_id, amount
;


-- QUESTION 65
-- Create a table based on the customer table which shows
-- the number of customers whose first name begins with each letter of the alphabet
-- Each record in the output should correspond to a different letter.
-- This should require using the SUBSTRING function.
SELECT
	SUBSTRING(first_name, 1, 1) AS first_letter,
	COUNT(*) AS frequency
FROM customer
GROUP BY first_letter
;


-- COMMANDS COVERED SO FAR:
-- GROUP BY, MIN, MAX, SUM, AVG
-- -----------------------------------------------------------------------------------------------------

-- ------------------------------------------------ --
-- SECTION 5 - combine GROUP BY with other commands --
-- ------------------------------------------------ --

-- DEMO: QUESTION 66
-- Which customer_id has made the most transaction/payments?
SELECT
	customer_id,
	COUNT(amount) AS num_payments
FROM payment
GROUP BY customer_id
ORDER BY num_payments DESC
;
-- Answer: Customer ID 148


-- DEMO: QUESTION 67
-- How much did that customer spend in total?
SELECT
	customer_id,
	COUNT(amount) AS num_payments,
	SUM(amount) AS total_payment
FROM payment
GROUP BY customer_id
ORDER BY num_payments DESC
;
-- Answer: 216.54


-- DEMO: QUESTION 68
-- List the customers who have spent more than 190 in total.
SELECT
	customer_id,
	SUM(amount) AS total_payment
FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 190
;


-- QUESTION 69
-- Create a table which lists each customer_id,
-- alongside their maximum payment in the payment table.
-- Order this list according to those maximum payments.
SELECT
	customer_id,
	MAX(amount) AS max_payment
FROM payment
GROUP BY customer_id
ORDER BY MAX(amount) DESC
;


-- QUESTION 70
-- Which customer_id has the highest average transaction amount?
SELECT
	customer_id,
	AVG(amount) AS avg_payment
FROM payment
GROUP BY customer_id
ORDER BY avg_payment DESC
;
-- Answer: Customer ID 187


-- QUESTION 71
-- List the customer_ids with an average transaction amount more than 5.
-- How many records are returned?
SELECT
	customer_id,
	AVG(amount) AS avg_payment
FROM payment
GROUP BY customer_id
HAVING AVG(amount) > 5
;
-- Answer: 23 records


-- QUESTION 72
-- Which film rating tends to have the longest films? The most expensive?
SELECT
	rating,
	AVG(length) AS avg_length,
	AVG(rental_rate) AS avg_rental_rate
FROM film
GROUP BY rating
;
-- Answer: PG-13 are the longest
-- Answer: PG are the most expensive


-- QUESTION 73
-- Find all the duplicated city_ids in address.
SELECT
	city_id,
	COUNT(*) AS freq
FROM address
GROUP BY city_id
HAVING COUNT(*) > 1
;
-- Answer: 576, 42, 312, 300


-- QUESTION 74
-- Which customer has rented films at the most different price-points?
-- How many price-points?
SELECT
	customer_id,
	COUNT(DISTINCT amount) AS num_price_points
FROM payment
GROUP BY customer_id
ORDER BY num_price_points DESC
;
-- Answer: Customer ID 448


-- QUESTION 75
-- What is the most common starting letter of all the films? Second most common?
-- Each record in the output should correspond to a different letter.
-- This should require using the SUBSTRING function.
SELECT
	substring(title, 1, 1) AS film_first_letter,
	COUNT(*) AS freq
FROM film
GROUP BY substring(title, 1, 1)
ORDER BY COUNT(*) DESC
;
-- Answer is S, followed by C


-- QUESTION 76
-- Which rental_id accounts for the most sales? What is its name?
-- This may require multiple steps
SELECT
	rental_id,
	SUM(amount) AS total_sales
FROM payment
GROUP BY rental_id
ORDER BY SUM(amount) DESC
;
-- Answer is Rental ID 4591

SELECT *
FROM rental
WHERE rental_id = 4591
;
-- Inventory ID is 2276

SELECT *
FROM inventory
WHERE inventory_id = 2276
;
-- Film ID is 492

SELECT *
FROM film
WHERE film_id = 492
;
-- Answer is JUNGLE CLOSER
-- Answer: JUNGLE CLOSER


-- COMMANDS COVERED SO FAR:
-- ORDER BY, GROUP BY, HAVING
-- -----------------------------------------------------------------------------------------------------

-- --------------------------------------- --
-- SECTION 6 - combining tables with JOINs --
-- --------------------------------------- --

-- DEMO: QUESTION 77
-- Join the address column FROM address onto the customer table.
SELECT
	c.*,
	a.address
FROM customer c
LEFT JOIN address a ON c.address_id = a.address_id
;


-- DEMO: QUESTION 78
-- Join the city column onto the customer table.
SELECT
	cu.*,
	ad.address,
	ct.city
FROM customer cu
LEFT JOIN address ad ON cu.address_id = ad.address_id
LEFT JOIN city ct ON ad.city_id = ct.city_id
;


-- DEMO: QUESTION 79
-- Join country onto the address table.
SELECT
	c.*,
	a.address,
	c1.city,
	c2.country
FROM customer c
LEFT JOIN address a ON c.address_id = a.address_id
LEFT JOIN city c1 ON a.city_id = c1.city_id
LEFT JOIN country c2 ON c1.country_id = c2.country_id
;


-- QUESTION 80
-- Join film name onto the inventory table.
SELECT
	i.*,
	f.title
FROM inventory i
LEFT JOIN film f ON i.film_id = f.film_id
;


-- QUESTION 81
-- Join film language onto the inventory table.
-- You will need to use the *name* column FROM the language table.
SELECT
	i.*,
	f.title AS film_title,
	l.name AS LANGUAGE
FROM inventory i
LEFT JOIN film f ON i.film_id = f.film_id
LEFT JOIN LANGUAGE l ON f.language_id = l.language_id
;


-- QUESTION 82
-- Join together all the films and actors so that actors
-- appear next to the films they acted in.
-- You can use film_actor as your base table.
SELECT
	f.title AS film_title,
	a.first_name,
	a.last_name
FROM film_actor fa
LEFT JOIN film f ON fa.film_id = f.film_id
LEFT JOIN actor a ON fa.actor_id = a.actor_id
;


-- QUESTION 83
-- Find all the first names in the customer table,
-- which are shared by actors in the actor table.
-- This could be done using an INNER JOIN.
SELECT
	DISTINCT cu.first_name
FROM customer cu
INNER JOIN actor ac ON cu.first_name = ac.first_name
ORDER BY cu.first_name
;


-- COMMANDS COVERED SO FAR:
-- LEFT JOIN, ON, INNER JOIN
-- -----------------------------------------------------------------------------------------------------

-- ------------------------------------------- --
-- SECTION 7 - using JOINs with other commands --
-- ------------------------------------------- --

-- DEMO: QUESTION 84
-- SELECT the first and last names of all customers
-- and the total sales amount for each (three columns in total).
-- What is the name of the customer who spent the most?
SELECT
	c.first_name,
	c.last_name,
	SUM(p.amount) AS total_sales
FROM payment p
LEFT JOIN customer c ON p.customer_id = c.customer_id
GROUP BY
	c.first_name,
	c.last_name
ORDER BY SUM(amount) DESC
;
-- Answer: Karl Seal spent the most


-- QUESTION 85
-- SELECT the first and last names of all customers FROM store 1
-- and the total sales amount for each (three columns in total).
-- What is the name of the customer who spent the most?
SELECT
	c.first_name,
	c.last_name,
	SUM(p.amount) AS total_sales
FROM payment p
LEFT JOIN customer c ON p.customer_id = c.customer_id
WHERE store_id = 1
GROUP BY
	c.first_name,
	c.last_name
ORDER BY SUM(amount) DESC
;
-- Answer: Eleanor Hunt spent the most in store 1


-- QUESTION 86
-- What are the names of the customers with more than 190 sales?
SELECT
	c.first_name,
	c.last_name,
	SUM(amount) AS total_sales
FROM payment p
LEFT JOIN customer c ON p.customer_id = c.customer_id
GROUP BY
	c.customer_id
HAVING SUM(amount) > 190
;
-- Answer: 5 customers, including Eleanor Hunt and Karl Seal


-- QUESTION 87
-- Find the average amount in the payment table for customers FROM each city.
-- Use a single query to return the city name and average amount as two columns.
-- This will require 4 tables and 3 joins
SELECT
	ct.city,
	AVG(p.amount) AS total_sales
FROM payment p
LEFT JOIN customer cu ON p.customer_id = cu.customer_id
LEFT JOIN address ad ON cu.address_id = ad.address_id
LEFT JOIN city ct ON ad.city_id = ct.city_id
GROUP BY
	ct.city
;


-- QUESTION 88
-- What is the name of the actor who appears in the most PG films?
SELECT
	a.actor_id,
	a.first_name,
	a.last_name,
	COUNT(f.film_id) AS freq
FROM film_actor fa
LEFT JOIN film f ON fa.film_id = f.film_id
LEFT JOIN actor a ON fa.actor_id = a.actor_id
WHERE f.rating = 'PG'
GROUP BY
	a.actor_id,
	a.first_name,
	a.last_name
ORDER BY freq DESC
;
-- Answer: Cameron Zellweger (15 films)


-- QUESTION 89
-- What is the name of the actor who appears in the longest films, on average?
SELECT
	a.actor_id,
	a.first_name,
	a.last_name,
	AVG(f.length) AS avg_length
FROM film_actor fa
LEFT JOIN film f ON fa.film_id = f.film_id
LEFT JOIN actor a ON fa.actor_id = a.actor_id
GROUP BY
	a.actor_id,
	a.first_name,
	a.last_name
ORDER BY avg_length DESC
;
-- Answer: Judy Dean (138 mins for her average film)


-- COMMANDS COVERED SO FAR:
-- JOINS, WHERE, GROUP BY, ORDER BY , HAVING
-- -----------------------------------------------------------------------------------------------------

-- ----------------------------- --
-- SECTION 8 - using sub-queries --
-- ----------------------------- --

-- DEMO: QUESTION 90
-- Using a sub-query, return the average number of transactions per customer.
SELECT
	AVG(total_transactions) AS avg_transactions_per_customer
FROM (
	SELECT
		customer_id,
		COUNT(*) AS total_transactions
	FROM payment
	GROUP BY
		customer_id
	) x
;
-- Answer: 26.8 transactions per customer


-- QUESTION 91
-- Using a sub-query, return the average number of actors featured per film.
SELECT
	AVG(num_actors) AS avg_num_actors
FROM (
	SELECT
		film_id,
		COUNT(actor_id) AS num_actors
	FROM film_actor
	GROUP BY
		film_id
	) x
;
-- Answer is 5.48


-- QUESTION 92
-- Using a sub-query, return the average number of actors featured per film.
-- Show the results for each different film rating (using GROUP BY).
SELECT
	rating,
	AVG(num_actors) AS avg_num_actors
FROM (
	SELECT
		fa.film_id,
		f.rating,
		COUNT(fa.actor_id) AS num_actors
	FROM film_actor fa
	LEFT JOIN film f ON fa.film_id = f.film_id
	GROUP BY
		fa.film_id,
		f.rating
	) x
GROUP BY
	rating
;


-- COMMANDS COVERED SO FAR:
-- Sub-queries
-- -----------------------------------------------------------------------------------------------------

-- ------------------------------------------
-- SECTION 9 - creating and removing tables --
-- ------------------------------------------

-- DEMO: QUESTION 93
-- Create a table named *your name*.
CREATE TABLE user_created.x_corndel 
	(only_column VARCHAR(250));


-- DEMO: QUESTION 94
-- Remove your new table.
DROP TABLE user_created.x_corndel;


-- DEMO: QUESTION 95
-- Create a table named *your name* with numeric, text, and date columns.
CREATE TABLE user_created.x_corndel 
	(col1 VARCHAR(250), col2 INT, col3 DATE);


-- DEMO: QUESTION 96
-- Create a table named *your name* containing a duplicate of the customer table.
CREATE TABLE x_corndel AS
SELECT *
FROM customer
;


-- DEMO: QUESTION 97
-- Create a table named *your name* containing only customers with names beginning with M.
CREATE TABLE x_corndel AS
SELECT *
FROM customer
WHERE first_name LIKE 'M%'
	OR last_name LIKE 'M%'
;


-- QUESTION 98
-- Create a table named *your name* with columns in the following formats:
-- DECIMAL(8,2), INT, VARCHAR(10), CHAR(10), TIMESTAMP
CREATE TABLE x_corndel 
(col1 DECIMAL(8, 2), col2 INT, col3 VARCHAR(10), col4 CHAR(10), col5 TIMESTAMP);


-- QUESTION 99
-- Create a table containing customers named in the list ('MOLLY','JENNY','JIMMY','LENNY')?
CREATE TABLE x_corndel AS
SELECT *
FROM customer
WHERE first_name IN ('MOLLY','JENNY','JIMMY','LENNY')
;


-- QUESTION 100
-- Create a new table based on the actor table
-- which contains the first_name and last_name columns only.
CREATE TABLE x_corndel AS
SELECT
	fist_name,
	last_name
FROM actor
;


-- COMMANDS COVERED SO FAR:
-- CREATE TABLE, DROP TABLE
-- -----------------------------------------------------------------------------------------------------

-- ------------------------------------------------- --
-- SECTION 10 - more commands and practice questions --
-- ------------------------------------------------- --

-- STRETCH I
-- What is the average film length by genre?
SELECT
	c.name AS category,
	CAST(AVG(f.length) AS DECIMAL(8, 2)) AS avg_length
FROM film f
INNER JOIN film_category fc ON f.film_id = fc.film_id
INNER JOIN category c ON fc.category_id = c.category_id
GROUP BY
	c.name
;
-- Answer is Sports


-- STRETCH II
-- What is the most profitable genre (action, animation, comedy, etc.)?
SELECT
	c.name AS category,
	SUM(p.amount) AS sales
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
INNER JOIN payment p ON r.rental_id = p.rental_id
INNER JOIN film_category fc ON f.film_id = fc.film_id
INNER JOIN category c ON fc.category_id = c.category_id
GROUP BY
	c.name
;
-- Answer is Sports


-- STRETCH III
-- How many different genres has the average customer rented?
SELECT
	CAST(AVG(distinct_categories) AS DECIMAL(8, 2)) AS avg_distinct_categories
FROM (
	SELECT
		p.customer_id,
		COUNT(DISTINCT c.name) AS distinct_categories
	FROM film f
	INNER JOIN inventory i ON f.film_id = i.film_id
	INNER JOIN rental r ON i.inventory_id = r.inventory_id
	INNER JOIN payment p ON r.rental_id = p.rental_id
	INNER JOIN film_category fc ON f.film_id = fc.film_id
	INNER JOIN category c ON fc.category_id = c.category_id
	GROUP BY
		p.customer_id
	) x
;
-- Answer is 12.92


-- STRETCH IV
-- Who is the most profitable actor?
SELECT
	a.actor_id,
	a.first_name,
	a.last_name,
	SUM(p.amount) AS total_sales
FROM actor a
INNER JOIN film_actor fa ON a.actor_id = fa.actor_id
INNER JOIN inventory i ON fa.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
INNER JOIN payment p ON r.rental_id = p.rental_id
GROUP BY
	a.actor_id,
	a.first_name,
	a.last_name
ORDER BY
	SUM(p.amount) DESC
;
-- Answer is Gina Degeneres


-- STRETCH V
-- What is the longest duration between two rentals by the same customer?
CREATE TABLE subsequent_dates AS
SELECT
	a.payment_date,
	MAX(b.payment_date) AS previous_payment_date
FROM payment a
LEFT JOIN payment b ON a.payment_date > b.payment_date
	AND a.customer_id = b.customer_id
GROUP BY
	a.payment_date
;

SELECT
	MAX(payment_date - previous_payment_date) AS time_diff
FROM subsequent_dates
;
-- Answer is 46 days 16:54:51

DROP TABLE subsequent_dates;


-- STRETCH VI
-- Create a copy of the payment table with a new column that splits payments into low/medium/high.
-- Payments less than 3 should be classified as 'low'
-- Payments between 3 and 4 should be classified as 'medium'
-- Payments greater than 4 should be classified as 'high'
-- Try googling 'SQL CASE STATEMENTS'
SELECT *,
	(CASE
	 	WHEN amount < 3 THEN 'low'
	 	WHEN amount > 4 THEN 'high'
	 	ELSE 'medium'
	END) AS amount_class
FROM payment
;


-- STRETCH VII
-- Create a copy of the customer table, with a new 'username' column
-- that takes the first three letter of the first name and the first three letter of the last name.
-- e.g. KARL SEAL becomes KARSEA
-- Try googling 'PostgreSQL concatenate strings'
SELECT *,
	CONCAT (SUBSTRING(first_name, 1, 3), SUBSTRING(last_name, 1, 3)) AS username
FROM customer
;


-- STRETCH VIII
-- Which month sees the most sales? Which day of the month? Which weekday?
-- Try googling 'get month FROM timestamp PostgreSQL'
SELECT
	EXTRACT(month FROM payment_date) AS payment_month,
	SUM(amount) AS total
FROM payment
GROUP BY
	EXTRACT(month FROM payment_date)
ORDER BY
	SUM(amount) DESC
;
-- Answer is April

SELECT
	EXTRACT(day FROM payment_date) AS payment_month,
	SUM(amount) AS total
FROM payment
GROUP BY
	EXTRACT(day FROM payment_date)
ORDER BY
	SUM(amount) DESC
;
-- Answer is 30th

SELECT
	EXTRACT(dow FROM payment_date) AS payment_month,
	SUM(amount) AS total
FROM payment
GROUP BY
	EXTRACT(dow FROM payment_date)
ORDER BY
	SUM(amount) DESC
;
-- Answer is Monday


-- STRETCH IX
-- Create a summary table of film sales, and add a rank column based on which film has the most.
CREATE TABLE film_sum AS
SELECT
	f.film_id,
	SUM(p.amount) AS sales
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
INNER JOIN payment p ON r.rental_id = p.rental_id
GROUP BY
	f.film_id
;

SELECT
	a.film_id,
	a.sales,
	COUNT(b.film_id) + 1 AS rk
FROM film_sum a
LEFT JOIN film_sum b ON a.sales < b.sales
GROUP BY
	a.film_id,
	a.sales
ORDER BY
	COUNT(b.film_id)
;

DROP TABLE film_sum;


-- STRETCH X
-- What is the most profitable combination of two actors, when they appear in the same film?
CREATE TABLE actor_combos AS
SELECT
	a.film_id,
	a1.actor_id AS actor_id_1,
	a1.first_name AS first_name_1,
	a1.last_name AS last_name_1,
	a2.actor_id AS actor_id_2,
	a2.first_name AS first_name_2,
	a2.last_name AS last_name_2
FROM film_actor a
INNER JOIN film_actor b ON a.film_id = b.film_id
	AND a.actor_id > b.actor_id
INNER JOIN actor a1 ON a.actor_id = a1.actor_id
INNER JOIN actor a2 ON b.actor_id = a2.actor_id
;

SELECT *
FROM actor_combos
ORDER BY
	film_id,
	actor_id_1,
	actor_id_2
;

SELECT
	ac.actor_id_1,
	ac.first_name_1,
	ac.last_name_1,
	ac.actor_id_2,
	ac.first_name_2,
	ac.last_name_2,
	SUM(p.amount) AS total_sales
FROM actor_combos ac
INNER JOIN inventory i ON ac.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
INNER JOIN payment p ON r.rental_id = p.rental_id
GROUP BY
	ac.actor_id_1,
	ac.first_name_1,
	ac.last_name_1,
	ac.actor_id_2,
	ac.first_name_2,
	ac.last_name_2
ORDER BY
	SUM(p.amount) DESC
;
-- Answer is Henry Berry and Julia McQueen

DROP TABLE actor_combos;


-- STRETCH XI
-- You have to recommend a film to Karl Seal. Which film would you recommend and why?
-- There is no one correct answer for this
-- You may need multiple queries to reach an answer that you are happy with
CREATE TABLE karl_films AS
SELECT
	DISTINCT f.film_id
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
INNER JOIN payment p ON r.rental_id = p.rental_id
INNER JOIN customer c ON p.customer_id = c.customer_id
WHERE c.first_name = 'KARL'
	AND c.last_name = 'SEAL'
;

SELECT
	CAST(AVG(length) AS DECIMAL(8, 2)) AS avg_length
FROM film
;
-- 115.27 for all customers

SELECT
	CAST(AVG(length) AS DECIMAL(8, 2)) AS avg_length
FROM film
WHERE film_id IN (
		SELECT film_id
		FROM karl_films
		)
;
-- 120.86 for Karl Seal (longer than usual)

SELECT
	actor_id,
	COUNT(*) AS freq
FROM film_actor
WHERE film_id IN (
		SELECT film_id
		FROM karl_films
		)
GROUP BY
	actor_id
ORDER BY
	COUNT(*) DESC
;
-- Actor 5 appears most (5 times)
-- Actors 26,156,58,164,102,25,83,173 all appear 4 times

SELECT
	category_id,
	COUNT(*) AS freq
FROM film_category
WHERE film_id IN (
		SELECT film_id
		FROM karl_films
		)
GROUP BY
	category_id
ORDER BY
	COUNT(*) DESC;
-- Categories 2 and 8 are his favourites

SELECT
	f.*
FROM film f
INNER JOIN film_actor fa1 ON f.film_id = fa1.film_id
INNER JOIN film_actor fa2 ON f.film_id = fa2.film_id
INNER JOIN film_category fc ON f.film_id = fc.film_id
WHERE fc.category_id IN (2,8)
	AND fa1.actor_id = 5
	AND fa2.actor_id IN (26,156,58,164,102,25,83,173)
ORDER BY
	f.length;
-- No results

SELECT
	fc.category_id,
	f.*
FROM film f
INNER JOIN film_actor fa1 ON f.film_id = fa1.film_id
INNER JOIN film_category fc ON f.film_id = fc.film_id
WHERE fc.category_id IN (2,8)
	AND fa1.actor_id = 5
ORDER BY f.length
;
-- Sunrise League (135 minutes long, which is also good for Karl)

SELECT *
FROM category
WHERE category_id = 2
;

SELECT *
FROM actor
WHERE actor_id = 5
;

DROP TABLE karl_films;

-- Sunrise league is an animation film (which Karl has rented more than any other genre)
-- Sunrise league features JOHNNY LOLLOBRIGIDA (who is Karl's favourite actor)
-- Sunrise league is 135 minutes long which is longer than average, like Karl's other rentals


-- COMMANDS COVERED SO FAR:
-- CASE, WHEN, ELSE, SUBSTRING, EXTRACT

